SECTION
Unit 1: Audio/Image Processing
We will kick off the course by discussing how computers represent audio and images and by doing some fun manipulations of these signals.  This will give us an excuse to start getting familiar with scientific Python, and particularly the <a href = "https://numpy.org/">numpy library</a>.  At this point in the course, we can mostly look at Python as a glorified calculator.  Aside from basic arithmetic operations and plotting, we will dip our toes into writing methods, which will allow us to organize our code better when performing more complex tasks.<h3>Science Topics</h3><ul><li><u>Audio processing</u>: Audio sampling, sinusoids, noise, comb filters, aliasing, the Discrete Fourier Transform, convolution</li><li><u>Image Processing:</u> Salt and papper noise, dithering, Moiré patterns, linear filters, histogram equalization</li></ul><h3>Programming Topics</h3><ul><li>Intro to 1D/2D numpy array manipulations</li><li>Introduction to plotting via matplotlib</li><li>Intro to method writing and usage</li></ul><h3>Libraries Introduced</h3><ul><li><a href = "https://numpy.org/">numpy</a>, <a href = "https://scipy.org/">scipy</a>, <a href = "https://matplotlib.org/">matplotlib</a>, <a href = "https://scikit-image.org/">skimage</a></li></ul><h3>Textbook Reading</h3>Harvey Mudd <i>CS For All</i> <a href = "CSForAll/Ch2.html">Ch. 2</a>

LECTURE
Course Sneak Preview

<ul><li><a href = "https://docs.google.com/presentation/d/1EqGUe0tpxp_O-QZz4-EdqBHUZ3wZ1pZf4JR3Q7f0U5w/edit?usp=sharing">Slides from today</a></li></ul>
LECTURE
Software Environment, Arithmetic Operations, Variable Naming, Begin Lists

<ul><li><i>CS For All</i> <a href = "CSForAll/Ch2.html#getting-started-in-python">2.2</a></li><li><a href = "https://github.com/Ursinus-IDS301-S2020/Week1Class">Code for class week 1</a></li></ul>
LECTURE
List slicing, Numpy Arrays / Plotting

<ul><li><i>CS For All</i> <a href = "CSForAll/Ch2.html#more-data-from-numbers-to-strings">2.3</a>, <a href = "CSForAll/Ch2.html#lists">2.4</a></li><li><a href = "https://www.pythoncentral.io/how-to-slice-listsarrays-and-tuples-in-python/">Reference on array slicing</li></ul>
LECTURE
Audio Processing: Sinusoids

<ul><li><a href = "https://github.com/Ursinus-IDS301-S2020/Week2Class">Code for class week 2</a></li> </ul>
LECTURE
Functions, Echoes/Convolution, Noise, Comb Filters

<ul><li><i>CS For All</i> <a href = "CSForAll/Ch2.html#functioning-in-python">2.5</a></li></ul>
LECTURE
The Discrete Fourier Transform, Begin Image Processing

<ul><li><a href = "https://en.wikipedia.org/wiki/Sawtooth_wave">Wikipedia page on sawtooth waves</a></li></ul>
LECTURE
Image Processing: 2D Arrays / Grids, Moiré Patterns, Quantization/Dithering

<ul><li><a href = "https://github.com/Ursinus-IDS301-S2020/ImageProcessingClass">Image Processing Code for Class</a></li><li><a href = "https://en.wikipedia.org/wiki/Dither">Wikipedia Page on Dithering</a></li><li><a href = "https://www.youtube.com/watch?v=xAoljeRJ3lU">The design of matplotlib colormaps</a></li></ul>
SECTION
Unit 2: Particle Simulations
In this unit, we will begin to explore some fundamental programming paradigms that will turn our computer into much more than a basic calculator.  In particular, we will study "if/else" statements, which are decisions made at runtime.  We will also begin loops, which will make it much easier to repeat the same code over and over again with minor variations.  Both of these things will allow us to begin exploring some interesting applications, including <a href = "https://en.wikipedia.org/wiki/Fractal">fractal generation</a> and simulations of celestial bodies. <h3>Science Topics</h3><ul><li>Fractals, the n-body problem, flocking simulations, chaos</li></ul><h3>Programming Topics</h3><ul><li>Loops, if statements, parallel arrays</li></ul><h3>Libraries Introduced</h3><ul><li><a href = "https://vpython.org/">vpython</a></li></ul>

LECTURE
Spyder, If Statements

<ul><li><i>CS For All</i> <a href = "CSForAll/Ch2.html#making-decisions">2.6</a></li><li><a href = "https://github.com/Ursinus-IDS301-S2020/Week4Class">Code for this week</a></li></ul>
LECTURE
Boolean Statements, Begin Loops

<ul><li><i>CS For All</i> <a href = "CSForAll/Ch5.html#repeated-tasks-loops">5.3</a></li></ul>
LECTURE
While Loops: Epoch Time, The 10 Heads Problem

<ul><li><a href = "https://github.com/Ursinus-IDS301-S2020/Week5Class">Code for this week</a></li><li><a href = "https://www.youtube.com/watch?v=n1SJ-Tn3bcQ">Derren Brown 10 Heads Experiment</a></li></ul>
LECTURE
VPython Animations, Euler Steps for Vector Simulations of Gravitation


LECTURE
Continue Gravitational Simulations / VPython, Begin Binary Star Simulation


LECTURE
Finish Binary Star Simulation, Chaos, The Logistic Map


SECTION
Unit 3: Dynamic Programming / Feature Design
In this unit, we will solidify our understanding of methods and loops by exploring a class of algorithms known as <i>dynamic programming algorithms</i>, which are algorithms that cleverly reuse computation to run more efficiently.  This will unlock a series of neat applications, including genome similarity search (aka what's my ancestry?) and audio synchronization (i.e. how to we line up two people singing the same song but at different rates?).  In the process of addressing audio synchronization, we will take a brief detour into machine learning to discuss learning from examples, also known as <a href = "https://en.wikipedia.org/wiki/Supervised_learning">supervised learning</a>, and we will use this to guess the genre of a clip of music<h3>Science Topics</h3><ul><li>Efficient algorithm design with dynamic programming</li><li>Genetic similarity search strategies</li><li>Audio feature design and synchronization</li><li>Supervised learning with k-nearest neighbors</li><li>Dimension reduction for visualization</li></ul><h3>Programming Concepts</h3><ul><li>Practice with methods + loops</li><li>Strings, dictionaries, recursive functions</li></ul><h3>Libraries Introduced</h3><ul><li><a href = "http://librosa.github.io/">librosa</a>, <a href = "https://github.com/bmcfee/pyrubberband">pyrubberband</a></li></ul>

LECTURE
Recursion, The Dynamic Programming Concept

<ul><li><i>CS For All</i> <a href = "CSForAll/Ch2.html#humans-chimpanzees-and-spell-checkers">2.1</a>, <a href = "CSForAll/Ch2.html#recursion">2.7</a>, <a href = "CSForAll/Ch2.html#recursion-revealed">2.8</a>, <a href = "CSForAll/Ch2.html#recursion-revealed">2.9</a>, <a href = "CSForAll/Ch2.html#use-it-or-lose-it">2.10</a>, <a href = "CSForAll/Ch2.html#edit-distance">2.11</a></li></ul>
LECTURE
Python Dictionaries, Edit Distance


LECTURE
Smith Waterman


LECTURE
Feature Design, Dimension Reduction


LECTURE
Audio Features


LECTURE
K-Nearest Neighbors for Genre Classification


LECTURE
Dynamic Time Warping


SECTION
Unit 4: Web Scraping And Text Processing
In this unit, we will learn how to gather text data from the web, an ability important for digital humanists and social scientists in particular.  We will then develop some basic tools to automatically process the data we gather.  By the end of the unit, students will create a program that synthesizes text in a particular style.  As the most complex assignment yet, it will require the notion of a "class" (custom variable type with methods) to organize code effectively.<h3>Science Topics</h3><ul><li>Web scraping, features for natural languages processing, sequential probabalistic modeling and sampling</li></ul><h3>Programming Concepts</h3><ul><li>Classes and objects</li></ul><h3>Libraries Introduced</h3><ul><li><a href = "https://www.crummy.com/software/BeautifulSoup/">beautifulsoup</a>, <a href = "http://www.nltk.org/">nltk</a>, <a href = "https://seaborn.pydata.org/">seaborn</a></li></ul>

LECTURE
Web scraping


LECTURE
TF-IDF


LECTURE
N-Grams


LECTURE
Markov Chains


LECTURE
Markov Chains Continued


LECTURE
Topic TBD


LECTURE
Topic TBD


LECTURE
Topic TBD


LECTURE
Course Wrapup / Raffle


LECTURE
No class


LECTURE
No class



